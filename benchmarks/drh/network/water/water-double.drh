
#define g 9.80665
#define a 0.5
#define gH 5

#define A1 2.0
#define A2 4.0
#define q1 5.0
#define q2 3.0

[0, 10] x1;
[0, 10] x2;

[0, 1] tau;
[0, 1] time;

{mode 1;

  invt: (tau >= 0);
        (tau <= 1);
  flow:
        d/dt[x1] = (q1 - a * sqrt(2*g) * sqrt(x1)) / A1; 
        d/dt[x2] = (q2 + a * sqrt(2*g) * (sqrt(x1) - sqrt(x2))) / A2;
        d/dt[tau]  = 1;
  jump:
        (and (tau = 1) (x1 < gH) (x2 <  gH)) ==> 
        @1 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 < gH) (x2 >= gH)) ==> 
	@2 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 >= gH) (x2 < gH)) ==> 
	@3 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 >= gH) (x2 >= gH)) ==> 
	@4 (and (x1' = x1) (x2' = x2) (tau' = 0));
}
{mode 2;

  invt: (tau >= 0);
        (tau <= 1);
  flow:
        d/dt[x1] = (q1 - a * sqrt(2*g) * sqrt(x1)) / A1; 
        d/dt[x2] = (a * sqrt(2*g) * (sqrt(x1) - sqrt(x2))) / A2;
        d/dt[tau]  = 1;
  jump:
        (and (tau = 1) (x1 < gH) (x2 <  gH)) ==> 
        @1 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 < gH) (x2 >= gH)) ==> 
	@2 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 >= gH) (x2 < gH)) ==> 
	@3 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 >= gH) (x2 >= gH)) ==> 
	@4 (and (x1' = x1) (x2' = x2) (tau' = 0));
}
{mode 3;

  invt: (tau >= 0);
        (tau <= 1);
  flow:
        d/dt[x1] = (- a * sqrt(2*g) * sqrt(x1)) / A1; 
        d/dt[x2] = (q2 + a * sqrt(2*g) * (sqrt(x1) - sqrt(x2))) / A2;
        d/dt[tau]  = 1;
  jump:
        (and (tau = 1) (x1 < gH) (x2 <  gH)) ==> 
        @1 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 < gH) (x2 >= gH)) ==> 
	@2 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 >= gH) (x2 < gH)) ==> 
	@3 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 >= gH) (x2 >= gH)) ==> 
	@4 (and (x1' = x1) (x2' = x2) (tau' = 0));
}
{mode 4;

  invt: (tau >= 0);
        (tau <= 1);
  flow:
        d/dt[x1] = (- a * sqrt(2*g) * sqrt(x1)) / A1; 
        d/dt[x2] = (a * sqrt(2*g) * (sqrt(x1) - sqrt(x2))) / A2;
        d/dt[tau]  = 1;
  jump:
        (and (tau = 1) (x1 < gH) (x2 <  gH)) ==> 
        @1 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 < gH) (x2 >= gH)) ==> 
	@2 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 >= gH) (x2 < gH)) ==> 
	@3 (and (x1' = x1) (x2' = x2) (tau' = 0));

        (and (tau = 1) (x1 >= gH) (x2 >= gH)) ==> 
	@4 (and (x1' = x1) (x2' = x2) (tau' = 0));
}

init:
@1  (and (abs(x1 - gH) <=  0.1) (abs(x2 - gH) <=  0.1) (tau = 0));

goal:
@1  (and (abs(x1 - gH) > 2) (abs(x2 - gH) > 2));
@2  (and (abs(x1 - gH) > 2) (abs(x2 - gH) > 2));
@3  (and (abs(x1 - gH) > 2) (abs(x2 - gH) > 2));
@4  (and (abs(x1 - gH) > 2) (abs(x2 - gH) > 2));
