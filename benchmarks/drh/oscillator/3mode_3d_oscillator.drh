#define omega 3.14

#define ax 1
#define ay 1.2
#define az 0.8

[-5, 5] x;
[-5, 5] y;
[-5, 5] z;

[-4, 4] omega1;
[-4, 4] omega2;

[0, 200] tau;
[0, 200] time;

{mode 1;

invt:
        (x >= -5);
        (y >= -5);
        (z >= -5);
        (omega1 >= -3.14);
        (omega2 >= -3.14);
        (tau <= 5);

flow:
        d/dt[x] = - ax * sin(omega * tau);
        d/dt[y] = - ay * sin( (omega1 + 1.0) * tau) * sin(omega2)*2;
        d/dt[z] = - az * sin( (omega2 + 1.0) * tau) * cos(omega1)*2;
        d/dt[omega1] = ( 0 - 0.5 * omega1);
        d/dt[omega2] = ( 0 - omega2);
        d/dt[tau] = 1;

jump: (and (tau >= 4)) ==> @2 ( and (tau' = 0) (x' = x) (y' = y * 0.2) (z' = z) (omega1' = 1.5) (omega2' = 1));

}

{mode 2;

invt:
        (x >= -5);
        (y >= -5);
        (z >= -5);
        (omega1 >= -3.14);
        (omega2 >= -3.14);
        (tau <= 10);

flow:
        d/dt[x] = - ax * sin(omega * tau);
        d/dt[y] = - ay * sin( (omega1 + 1.0) * tau) * sin(omega2)*2;
        d/dt[z] = - az * sin( (2.0 - omega2) * tau) * sin(omega1)*2;
        d/dt[omega1] = (0 - omega1);
        d/dt[omega2] = ( 0 - omega2);
        d/dt[tau] = 1;

jump: (and (tau >= 8)) ==> @3 (and (tau' = 0) (x' = 0.2 * x) (y' = y * 0.5 ) (z' = z) (omega1' = sin(omega1)) (omega2' = (0- omega2)));
}


{mode 3;

invt:
        (x >= -5);
        (y >= -5);
        (z >= -5);
        (omega1 >= -3.14);
        (omega2 >= -3.14);
        (tau <= 6);

flow:
        d/dt[x] = - ax * sin(omega * tau);
        d/dt[y] = - ay * sin( (omega1 + 1.0) * tau) * sin(omega2)*2;
        d/dt[z] = - az * sin( (omega2 + 2.0) * tau) * cos(omega1)*2;
        d/dt[omega1] = ( 0 - 0.5 * omega1);
        d/dt[omega2] = ( 0 - omega2);
        d/dt[tau] = 1;

jump: (and (tau >= 5)) ==> @1 ( and (tau' = 0) (x' = x) (y' = y) (z' = z) (omega1' = 1) (omega2' = 1));

}


init:
@1 (and (x <= 0.1) (x >= - 0.2) (y = 0) (z = 0) (tau = 0) (omega1 = 2) (omega2 = 2.5));

goal:
@3 (tau = 4.0);
