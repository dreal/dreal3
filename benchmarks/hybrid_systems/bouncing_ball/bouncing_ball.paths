(set-logic QF_NRA_ODE)
(declare-fun v () Real)
(declare-fun x () Real)
(declare-fun v_0_0 () Real)
(declare-fun v_0_t () Real)
(declare-fun v_1_0 () Real)
(declare-fun v_1_t () Real)
(declare-fun v_2_0 () Real)
(declare-fun v_2_t () Real)
(declare-fun x_0_0 () Real)
(declare-fun x_0_t () Real)
(declare-fun x_1_0 () Real)
(declare-fun x_1_t () Real)
(declare-fun x_2_0 () Real)
(declare-fun x_2_t () Real)
(declare-fun time_0 () Real)
(declare-fun time_1 () Real)
(declare-fun time_2 () Real)
(declare-fun mode_1_0 () Real)
(declare-fun mode_1_1 () Real)
(declare-fun mode_1_2 () Real)
(declare-fun gamma_singleton0_1 () Real)
(declare-fun gamma_singleton0_2 () Real)
(declare-fun gamma_singleton0_1_0_0 () Real)
(declare-fun gamma_singleton0_1_1_0 () Real)
(declare-fun gamma_singleton0_1_2_0 () Real)
(declare-fun gamma_singleton0_2_0_0 () Real)
(declare-fun gamma_singleton0_2_1_0 () Real)
(declare-fun gamma_singleton0_2_2_0 () Real)
(define-ode flow_0 ((= d/dt[v] (+ (* -9.8 gamma_singleton0_1) (* -9.8 gamma_singleton0_2))) (= d/dt[x] (+ (* v gamma_singleton0_1) (* v gamma_singleton0_2))) (= d/dt[gamma_singleton0_1] 0) (= d/dt[gamma_singleton0_2] 0)))
(assert (<= -100 v_0_0))
(assert (<= v_0_0 100))
(assert (<= -100 v_0_t))
(assert (<= v_0_t 100))
(assert (<= -100 v_1_0))
(assert (<= v_1_0 100))
(assert (<= -100 v_1_t))
(assert (<= v_1_t 100))
(assert (<= -100 v_2_0))
(assert (<= v_2_0 100))
(assert (<= -100 v_2_t))
(assert (<= v_2_t 100))
(assert (<= 0 x_0_0))
(assert (<= x_0_0 20))
(assert (<= 0 x_0_t))
(assert (<= x_0_t 20))
(assert (<= 0 x_1_0))
(assert (<= x_1_0 20))
(assert (<= 0 x_1_t))
(assert (<= x_1_t 20))
(assert (<= 0 x_2_0))
(assert (<= x_2_0 20))
(assert (<= 0 x_2_t))
(assert (<= x_2_t 20))
(assert (<= 0 time_0))
(assert (<= time_0 10))
(assert (<= 0 time_1))
(assert (<= time_1 10))
(assert (<= 0 time_2))
(assert (<= time_2 10))
(assert (<= 1 mode_1_0))
(assert (<= mode_1_0 2))
(assert (<= 1 mode_1_1))
(assert (<= mode_1_1 2))
(assert (<= 1 mode_1_2))
(assert (<= mode_1_2 2))
(assert (<= 0 gamma_singleton0_1_0_0))
(assert (<= gamma_singleton0_1_0_0 1))
(assert (<= 0 gamma_singleton0_1_1_0))
(assert (<= gamma_singleton0_1_1_0 1))
(assert (<= 0 gamma_singleton0_1_2_0))
(assert (<= gamma_singleton0_1_2_0 1))
(assert (<= 0 gamma_singleton0_2_0_0))
(assert (<= gamma_singleton0_2_0_0 1))
(assert (<= 0 gamma_singleton0_2_1_0))
(assert (<= gamma_singleton0_2_1_0 1))
(assert (<= 0 gamma_singleton0_2_2_0))
(assert (<= gamma_singleton0_2_2_0 1))
(assert (and (= mode_1_0 1) (= v_0_0 0) (= x_0_0 10)))
(assert (and (or (and (= v_0_t 0) (= v_1_0 v_0_t) (= x_1_0 x_0_t) (= mode_1_1 1) (= mode_1_0 2)) (and (= x_1_0 x_0_t) (= v_1_0 v_0_t) (= mode_1_1 2) (= mode_1_0 2)) (and (= x_0_t 0) (= v_1_0 (- 0 v_0_t)) (= x_1_0 x_0_t) (= mode_1_1 2) (= mode_1_0 1)) (and (= x_1_0 x_0_t) (= v_1_0 v_0_t) (= mode_1_1 1) (= mode_1_0 1))) (or (not (= mode_1_0 1)) (not (= mode_1_0 2))) (or (not (= mode_1_0 2)) (not (= mode_1_0 1))) (=> (= gamma_singleton0_1_0_0 0) (not (= mode_1_0 1))) (=> (not (= mode_1_0 1)) (= gamma_singleton0_1_0_0 0)) (=> (= gamma_singleton0_1_0_0 1) (= mode_1_0 1)) (=> (= mode_1_0 1) (= gamma_singleton0_1_0_0 1)) (=> (= gamma_singleton0_2_0_0 0) (not (= mode_1_0 2))) (=> (not (= mode_1_0 2)) (= gamma_singleton0_2_0_0 0)) (=> (= gamma_singleton0_2_0_0 1) (= mode_1_0 2)) (=> (= mode_1_0 2) (= gamma_singleton0_2_0_0 1)) (= [v_0_t x_0_t gamma_singleton0_1_0_0 gamma_singleton0_2_0_0] (integral 0. time_0 [v_0_0 x_0_0 gamma_singleton0_1_0_0 gamma_singleton0_2_0_0] flow_0)) (=> (= mode_1_0 2) (forall_t 0 [0 time_0] (and (>= x_0_t 0) (>= v_0_t 0)))) (=> (= mode_1_0 1) (forall_t 0 [0 time_0] (and (>= x_0_t 0) (<= v_0_t 0)))) (or (and (= v_1_t 0) (= v_2_0 v_1_t) (= x_2_0 x_1_t) (= mode_1_2 1) (= mode_1_1 2)) (and (= x_2_0 x_1_t) (= v_2_0 v_1_t) (= mode_1_2 2) (= mode_1_1 2)) (and (= x_1_t 0) (= v_2_0 (- 0 v_1_t)) (= x_2_0 x_1_t) (= mode_1_2 2) (= mode_1_1 1)) (and (= x_2_0 x_1_t) (= v_2_0 v_1_t) (= mode_1_2 1) (= mode_1_1 1))) (or (not (= mode_1_1 1)) (not (= mode_1_1 2))) (or (not (= mode_1_1 2)) (not (= mode_1_1 1))) (=> (= gamma_singleton0_1_1_0 0) (not (= mode_1_1 1))) (=> (not (= mode_1_1 1)) (= gamma_singleton0_1_1_0 0)) (=> (= gamma_singleton0_1_1_0 1) (= mode_1_1 1)) (=> (= mode_1_1 1) (= gamma_singleton0_1_1_0 1)) (=> (= gamma_singleton0_2_1_0 0) (not (= mode_1_1 2))) (=> (not (= mode_1_1 2)) (= gamma_singleton0_2_1_0 0)) (=> (= gamma_singleton0_2_1_0 1) (= mode_1_1 2)) (=> (= mode_1_1 2) (= gamma_singleton0_2_1_0 1)) (= [v_1_t x_1_t gamma_singleton0_1_1_0 gamma_singleton0_2_1_0] (integral 0. time_1 [v_1_0 x_1_0 gamma_singleton0_1_1_0 gamma_singleton0_2_1_0] flow_0)) (=> (= mode_1_1 2) (forall_t 1 [0 time_1] (and (>= x_1_t 0) (>= v_1_t 0)))) (=> (= mode_1_1 1) (forall_t 1 [0 time_1] (and (>= x_1_t 0) (<= v_1_t 0))))))
(assert (and (=> (= gamma_singleton0_1_2_0 0) (not (= mode_1_2 1))) (=> (not (= mode_1_2 1)) (= gamma_singleton0_1_2_0 0)) (=> (= gamma_singleton0_1_2_0 1) (= mode_1_2 1)) (=> (= mode_1_2 1) (= gamma_singleton0_1_2_0 1)) (=> (= gamma_singleton0_2_2_0 0) (not (= mode_1_2 2))) (=> (not (= mode_1_2 2)) (= gamma_singleton0_2_2_0 0)) (=> (= gamma_singleton0_2_2_0 1) (= mode_1_2 2)) (=> (= mode_1_2 2) (= gamma_singleton0_2_2_0 1)) (= [v_2_t x_2_t gamma_singleton0_1_2_0 gamma_singleton0_2_2_0] (integral 0. time_2 [v_2_0 x_2_0 gamma_singleton0_1_2_0 gamma_singleton0_2_2_0] flow_0)) (=> (= mode_1_2 2) (forall_t 2 [0 time_2] (and (>= x_2_t 0) (>= v_2_t 0)))) (=> (= mode_1_2 1) (forall_t 2 [0 time_2] (and (>= x_2_t 0) (<= v_2_t 0))))))
(assert (and (= mode_1_2 2) (>= v_2_t 1) (= x_2_t 1) (or (not (= mode_1_2 1)) (not (= mode_1_2 2))) (or (not (= mode_1_2 2)) (not (= mode_1_2 1)))))
(check-sat)
(exit)
