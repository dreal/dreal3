(set-logic QF_NRA_ODE)
(declare-fun time_0 () Real)
(declare-fun mode_1_0 () Real)
(declare-fun mode_2_0 () Real)
(declare-fun gamma_test_1 () Real)
(declare-fun gamma_test_2 () Real)
(declare-fun gamma_test_3 () Real)
(declare-fun gamma_test2_1 () Real)
(declare-fun gamma_test2_2 () Real)
(declare-fun gamma_test2_3 () Real)
(declare-fun gamma_test_1_0_0 () Real)
(declare-fun gamma_test_2_0_0 () Real)
(declare-fun gamma_test_3_0_0 () Real)
(declare-fun gamma_test2_1_0_0 () Real)
(declare-fun gamma_test2_2_0_0 () Real)
(declare-fun gamma_test2_3_0_0 () Real)
(define-ode flow_0 ((= d/dt[gamma_test_1] 0) (= d/dt[gamma_test_2] 0) (= d/dt[gamma_test_3] 0) (= d/dt[gamma_test2_1] 0) (= d/dt[gamma_test2_2] 0) (= d/dt[gamma_test2_3] 0)))
(assert (<= 0 time_0))
(assert (<= time_0 5))
(assert (<= 1 mode_1_0))
(assert (<= mode_1_0 3))
(assert (<= 1 mode_2_0))
(assert (<= mode_2_0 3))
(assert (<= 0 gamma_test_1_0_0))
(assert (<= gamma_test_1_0_0 1))
(assert (<= 0 gamma_test_2_0_0))
(assert (<= gamma_test_2_0_0 1))
(assert (<= 0 gamma_test_3_0_0))
(assert (<= gamma_test_3_0_0 1))
(assert (<= 0 gamma_test2_1_0_0))
(assert (<= gamma_test2_1_0_0 1))
(assert (<= 0 gamma_test2_2_0_0))
(assert (<= gamma_test2_2_0_0 1))
(assert (<= 0 gamma_test2_3_0_0))
(assert (<= gamma_test2_3_0_0 1))
(assert (and (= mode_2_0 1) (= mode_1_0 1)))
(assert true)
(assert (and (=> (= gamma_test_1_0_0 0) (not (= mode_1_0 1))) (=> (not (= mode_1_0 1)) (= gamma_test_1_0_0 0)) (=> (= gamma_test_1_0_0 1) (= mode_1_0 1)) (=> (= mode_1_0 1) (= gamma_test_1_0_0 1)) (=> (= gamma_test_2_0_0 0) (not (= mode_1_0 2))) (=> (not (= mode_1_0 2)) (= gamma_test_2_0_0 0)) (=> (= gamma_test_2_0_0 1) (= mode_1_0 2)) (=> (= mode_1_0 2) (= gamma_test_2_0_0 1)) (=> (= gamma_test_3_0_0 0) (not (= mode_1_0 3))) (=> (not (= mode_1_0 3)) (= gamma_test_3_0_0 0)) (=> (= gamma_test_3_0_0 1) (= mode_1_0 3)) (=> (= mode_1_0 3) (= gamma_test_3_0_0 1)) (=> (= gamma_test2_1_0_0 0) (not (= mode_2_0 1))) (=> (not (= mode_2_0 1)) (= gamma_test2_1_0_0 0)) (=> (= gamma_test2_1_0_0 1) (= mode_2_0 1)) (=> (= mode_2_0 1) (= gamma_test2_1_0_0 1)) (=> (= gamma_test2_2_0_0 0) (not (= mode_2_0 2))) (=> (not (= mode_2_0 2)) (= gamma_test2_2_0_0 0)) (=> (= gamma_test2_2_0_0 1) (= mode_2_0 2)) (=> (= mode_2_0 2) (= gamma_test2_2_0_0 1)) (=> (= gamma_test2_3_0_0 0) (not (= mode_2_0 3))) (=> (not (= mode_2_0 3)) (= gamma_test2_3_0_0 0)) (=> (= gamma_test2_3_0_0 1) (= mode_2_0 3)) (=> (= mode_2_0 3) (= gamma_test2_3_0_0 1)) (= [gamma_test_1_0_0 gamma_test_2_0_0 gamma_test_3_0_0 gamma_test2_1_0_0 gamma_test2_2_0_0 gamma_test2_3_0_0] (integral 0. time_0 [gamma_test_1_0_0 gamma_test_2_0_0 gamma_test_3_0_0 gamma_test2_1_0_0 gamma_test2_2_0_0 gamma_test2_3_0_0] flow_0)) (=> (= mode_2_0 3) (forall_t 0 [0 time_0] true)) (=> (= mode_2_0 2) (forall_t 0 [0 time_0] true)) (=> (= mode_2_0 1) (forall_t 0 [0 time_0] true)) (=> (= mode_1_0 3) (forall_t 0 [0 time_0] true)) (=> (= mode_1_0 2) (forall_t 0 [0 time_0] true)) (=> (= mode_1_0 1) (forall_t 0 [0 time_0] true))))
(assert (and (= mode_2_0 2) (= mode_1_0 2)))
(check-sat)
(exit)
