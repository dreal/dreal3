(set-logic QF_NRA_ODE)
(declare-fun x () Real)
(declare-fun y () Real)
(declare-fun z () Real)
(declare-fun x_0_0 () Real)
(declare-fun x_0_t () Real)
(declare-fun y_0_0 () Real)
(declare-fun y_0_t () Real)
(declare-fun z_0_0 () Real)
(declare-fun z_0_t () Real)
(declare-fun time_0 () Real)
(declare-fun mode_1_0 () Real)
(declare-fun mode_2_0 () Real)
(declare-fun mode_3_0 () Real)
(declare-fun gamma_train_1_0 () Real)
(declare-fun gamma_train_2_0 () Real)
(declare-fun gamma_train_3_0 () Real)
(declare-fun gamma_gate_1_0 () Real)
(declare-fun gamma_gate_2_0 () Real)
(declare-fun gamma_gate_3_0 () Real)
(declare-fun gamma_gate_4_0 () Real)
(declare-fun gamma_controller_1_0 () Real)
(declare-fun gamma_controller_2_0 () Real)
(declare-fun gamma_controller_3_0 () Real)
(assert (<= 0 x_0_0))
(assert (<= x_0_0 5000))
(assert (<= 0 x_0_t))
(assert (<= x_0_t 5000))
(assert (<= 0 y_0_0))
(assert (<= y_0_0 90))
(assert (<= 0 y_0_t))
(assert (<= y_0_t 90))
(assert (<= 0 z_0_0))
(assert (<= z_0_0 5))
(assert (<= 0 z_0_t))
(assert (<= z_0_t 5))
(assert (<= 0 time_0))
(assert (<= time_0 5))
(assert (<= 1 mode_1_0))
(assert (<= mode_1_0 3))
(assert (<= 1 mode_2_0))
(assert (<= mode_2_0 4))
(assert (<= 1 mode_3_0))
(assert (<= mode_3_0 3))
(assert (<= 0 gamma_train_1_0))
(assert (<= gamma_train_1_0 1))
(assert (<= 0 gamma_train_2_0))
(assert (<= gamma_train_2_0 1))
(assert (<= 0 gamma_train_3_0))
(assert (<= gamma_train_3_0 1))
(assert (<= 0 gamma_gate_1_0))
(assert (<= gamma_gate_1_0 1))
(assert (<= 0 gamma_gate_2_0))
(assert (<= gamma_gate_2_0 1))
(assert (<= 0 gamma_gate_3_0))
(assert (<= gamma_gate_3_0 1))
(assert (<= 0 gamma_gate_4_0))
(assert (<= gamma_gate_4_0 1))
(assert (<= 0 gamma_controller_1_0))
(assert (<= gamma_controller_1_0 1))
(assert (<= 0 gamma_controller_2_0))
(assert (<= gamma_controller_2_0 1))
(assert (<= 0 gamma_controller_3_0))
(assert (<= gamma_controller_3_0 1))
(assert (and (= mode_1_0 1) (= x_0_0 5000) (= mode_2_0 4) (= y_0_0 90) (= mode_3_0 3) (= z_0_0 0)))
(assert true)
(assert (and (forall_t 0 [0 time_0] (and (=> (= mode_3_0 3) true) (=> (= mode_3_0 2) (<= z_0_t 5)) (=> (= mode_3_0 1) (<= z_0_t 5)) (=> (= mode_2_0 4) (<= y_0_t 90)) (=> (= mode_2_0 3) (>= y_0_t 90)) (=> (= mode_2_0 2) (>= y_0_t 0)) (=> (= mode_2_0 1) (= y_0_t 0)) (=> (= mode_1_0 3) (>= x_0_t -100)) (=> (= mode_1_0 2) (>= x_0_t 0)) (=> (= mode_1_0 1) (>= x_0_t 1000)))) (= [x_0_t y_0_t z_0_t] (integral 0. time_0 [x_0_0 y_0_0 z_0_0] flow_0))))
(assert (and (>= y_0_t 0) (>= x_0_t 0) (<= x_0_t 1000)))
(check-sat)
(exit)
