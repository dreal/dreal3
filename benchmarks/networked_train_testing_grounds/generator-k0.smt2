(set-logic QF_NRA_ODE)
(declare-fun dur1 () Real)
(declare-fun dur2 () Real)
(declare-fun fuellevel () Real)
(declare-fun ran () Real)
(declare-fun dur1_0_0 () Real)
(declare-fun dur1_0_t () Real)
(declare-fun dur2_0_0 () Real)
(declare-fun dur2_0_t () Real)
(declare-fun fuellevel_0_0 () Real)
(declare-fun fuellevel_0_t () Real)
(declare-fun ran_0_0 () Real)
(declare-fun ran_0_t () Real)
(declare-fun time_0 () Real)
(declare-fun mode_1_0 () Real)
(declare-fun mode_2_0 () Real)
(declare-fun gamma_generate_1 () Real)
(declare-fun gamma_generate_2 () Real)
(declare-fun gamma_refuel_1 () Real)
(declare-fun gamma_refuel_2 () Real)
(declare-fun gamma_generate_1_0_0 () Real)
(declare-fun gamma_generate_2_0_0 () Real)
(declare-fun gamma_refuel_1_0_0 () Real)
(declare-fun gamma_refuel_2_0_0 () Real)
(define-ode flow_0 ((= d/dt[dur1] (* -1 gamma_generate_2)) (= d/dt[dur2] (* -1 gamma_refuel_2)) (= d/dt[fuellevel] (+ (* -1 gamma_generate_2) (* 2 gamma_refuel_2))) (= d/dt[gamma_generate_1] 0) (= d/dt[gamma_generate_2] 0) (= d/dt[gamma_refuel_1] 0) (= d/dt[gamma_refuel_2] 0) (= d/dt[ran] 0)))
(assert (<= 0 dur1_0_0))
(assert (<= dur1_0_0 1000))
(assert (<= 0 dur1_0_t))
(assert (<= dur1_0_t 1000))
(assert (<= 0 dur2_0_0))
(assert (<= dur2_0_0 10))
(assert (<= 0 dur2_0_t))
(assert (<= dur2_0_t 10))
(assert (<= -2000 fuellevel_0_0))
(assert (<= fuellevel_0_0 2000))
(assert (<= -2000 fuellevel_0_t))
(assert (<= fuellevel_0_t 2000))
(assert (<= 0 ran_0_0))
(assert (<= ran_0_0 1))
(assert (<= 0 ran_0_t))
(assert (<= ran_0_t 1))
(assert (<= 0 time_0))
(assert (<= time_0 2000))
(assert (<= 1 mode_1_0))
(assert (<= mode_1_0 2))
(assert (<= 1 mode_2_0))
(assert (<= mode_2_0 2))
(assert (<= 0 gamma_generate_1_0_0))
(assert (<= gamma_generate_1_0_0 1))
(assert (<= 0 gamma_generate_2_0_0))
(assert (<= gamma_generate_2_0_0 1))
(assert (<= 0 gamma_refuel_1_0_0))
(assert (<= gamma_refuel_1_0_0 1))
(assert (<= 0 gamma_refuel_2_0_0))
(assert (<= gamma_refuel_2_0_0 1))
(assert (and (= mode_1_0 2) (= dur1_0_0 1000) (= fuellevel_0_0 980) (= ran_0_0 0) (= mode_2_0 2) (= dur2_0_0 10)))
(assert true)
(assert (and (=> (= gamma_generate_1_0_0 0) (not (= mode_1_0 1))) (=> (not (= mode_1_0 1)) (= gamma_generate_1_0_0 0)) (=> (= gamma_generate_1_0_0 1) (= mode_1_0 1)) (=> (= mode_1_0 1) (= gamma_generate_1_0_0 1)) (=> (= gamma_generate_2_0_0 0) (not (= mode_1_0 2))) (=> (not (= mode_1_0 2)) (= gamma_generate_2_0_0 0)) (=> (= gamma_generate_2_0_0 1) (= mode_1_0 2)) (=> (= mode_1_0 2) (= gamma_generate_2_0_0 1)) (=> (= gamma_refuel_1_0_0 0) (not (= mode_2_0 1))) (=> (not (= mode_2_0 1)) (= gamma_refuel_1_0_0 0)) (=> (= gamma_refuel_1_0_0 1) (= mode_2_0 1)) (=> (= mode_2_0 1) (= gamma_refuel_1_0_0 1)) (=> (= gamma_refuel_2_0_0 0) (not (= mode_2_0 2))) (=> (not (= mode_2_0 2)) (= gamma_refuel_2_0_0 0)) (=> (= gamma_refuel_2_0_0 1) (= mode_2_0 2)) (=> (= mode_2_0 2) (= gamma_refuel_2_0_0 1)) (= [dur1_0_t dur2_0_t fuellevel_0_t gamma_generate_1_0_0 gamma_generate_2_0_0 gamma_refuel_1_0_0 gamma_refuel_2_0_0 ran_0_t] (integral 0. time_0 [dur1_0_0 dur2_0_0 fuellevel_0_0 gamma_generate_1_0_0 gamma_generate_2_0_0 gamma_refuel_1_0_0 gamma_refuel_2_0_0 ran_0_0] flow_0)) (=> (= mode_2_0 2) (forall_t 0 [0 time_0] (>= dur2_0_t 0))) (=> (= mode_2_0 1) (forall_t 0 [0 time_0] true)) (=> (= mode_1_0 2) (forall_t 0 [0 time_0] (>= dur1_0_t 0))) (=> (= mode_1_0 1) (forall_t 0 [0 time_0] true))))
(assert (= ran_0_t 1))
(check-sat)
(exit)
