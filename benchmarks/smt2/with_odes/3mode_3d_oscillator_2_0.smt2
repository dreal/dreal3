(set-logic QF_NRA_ODE)
(declare-fun z () Real)
(declare-fun y () Real)
(declare-fun x () Real)
(declare-fun tau () Real)
(declare-fun omega2 () Real)
(declare-fun omega1 () Real)
(declare-fun z_0_0 () Real)
(declare-fun z_0_t () Real)
(declare-fun z_1_0 () Real)
(declare-fun z_1_t () Real)
(declare-fun z_2_0 () Real)
(declare-fun z_2_t () Real)
(declare-fun y_0_0 () Real)
(declare-fun y_0_t () Real)
(declare-fun y_1_0 () Real)
(declare-fun y_1_t () Real)
(declare-fun y_2_0 () Real)
(declare-fun y_2_t () Real)
(declare-fun x_0_0 () Real)
(declare-fun x_0_t () Real)
(declare-fun x_1_0 () Real)
(declare-fun x_1_t () Real)
(declare-fun x_2_0 () Real)
(declare-fun x_2_t () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(declare-fun tau_1_0 () Real)
(declare-fun tau_1_t () Real)
(declare-fun tau_2_0 () Real)
(declare-fun tau_2_t () Real)
(declare-fun omega2_0_0 () Real)
(declare-fun omega2_0_t () Real)
(declare-fun omega2_1_0 () Real)
(declare-fun omega2_1_t () Real)
(declare-fun omega2_2_0 () Real)
(declare-fun omega2_2_t () Real)
(declare-fun omega1_0_0 () Real)
(declare-fun omega1_0_t () Real)
(declare-fun omega1_1_0 () Real)
(declare-fun omega1_1_t () Real)
(declare-fun omega1_2_0 () Real)
(declare-fun omega1_2_t () Real)
(declare-fun time_0 () Real)
(declare-fun time_1 () Real)
(declare-fun time_2 () Real)
(declare-fun mode_0 () Real)
(declare-fun mode_1 () Real)
(declare-fun mode_2 () Real)
(define-ode flow_1 (
(= d/dt[z] (* (* (* -0.800000 (sin (* (+ omega2 1.000000) tau))) (cos omega1)) 2.000000)) 
(= d/dt[y] (* (* (* -1.200000 (sin (* (+ omega1 1.000000) tau))) (sin omega2)) 2.000000)) 
(= d/dt[x] (* -1.000000 (sin (* 3.140000 tau)))) 
(= d/dt[tau] 1.000000)
(= d/dt[omega2] (- 0.000000 omega2)) 
(= d/dt[omega1] (- 0.000000 (* 0.500000 omega1))) 
))
(define-ode flow_2 (
(= d/dt[z] (* (* (* -0.800000 (sin (* (- 2.000000 omega2) tau))) (sin omega1)) 2.000000)) 
(= d/dt[y] (* (* (* -1.200000 (sin (* (+ omega1 1.000000) tau))) (sin omega2)) 2.000000)) 
(= d/dt[x] (* -1.000000 (sin (* 3.140000 tau)))) 
(= d/dt[tau] 1.000000)
(= d/dt[omega1] (- 0.000000 omega1)) 
(= d/dt[omega2] (- 0.000000 omega2)) 
))
(define-ode flow_3 (
(= d/dt[z] (* (* (* -0.800000 (sin (* (+ omega2 2.000000) tau))) (cos omega1)) 2.000000)) 
(= d/dt[y] (* (* (* -1.200000 (sin (* (+ omega1 1.000000) tau))) (sin omega2)) 2.000000)) 
(= d/dt[x] (* -1.000000 (sin (* 3.140000 tau)))) 
(= d/dt[tau] 1.000000)
(= d/dt[omega2] (- 0.000000 omega2)) 
(= d/dt[omega1] (- 0.000000 (* 0.500000 omega1))) 
))
(assert (<= -5.000000 z_0_0))
(assert (<= z_0_0 5.000000))
(assert (<= -5.000000 z_0_t))
(assert (<= z_0_t 5.000000))
(assert (<= -5.000000 z_1_0))
(assert (<= z_1_0 5.000000))
(assert (<= -5.000000 z_1_t))
(assert (<= z_1_t 5.000000))
(assert (<= -5.000000 z_2_0))
(assert (<= z_2_0 5.000000))
(assert (<= -5.000000 z_2_t))
(assert (<= z_2_t 5.000000))
(assert (<= -5.000000 y_0_0))
(assert (<= y_0_0 5.000000))
(assert (<= -5.000000 y_0_t))
(assert (<= y_0_t 5.000000))
(assert (<= -5.000000 y_1_0))
(assert (<= y_1_0 5.000000))
(assert (<= -5.000000 y_1_t))
(assert (<= y_1_t 5.000000))
(assert (<= -5.000000 y_2_0))
(assert (<= y_2_0 5.000000))
(assert (<= -5.000000 y_2_t))
(assert (<= y_2_t 5.000000))
(assert (<= -5.000000 x_0_0))
(assert (<= x_0_0 5.000000))
(assert (<= -5.000000 x_0_t))
(assert (<= x_0_t 5.000000))
(assert (<= -5.000000 x_1_0))
(assert (<= x_1_0 5.000000))
(assert (<= -5.000000 x_1_t))
(assert (<= x_1_t 5.000000))
(assert (<= -5.000000 x_2_0))
(assert (<= x_2_0 5.000000))
(assert (<= -5.000000 x_2_t))
(assert (<= x_2_t 5.000000))
(assert (<= 0.000000 tau_0_0))
(assert (<= tau_0_0 200.000000))
(assert (<= 0.000000 tau_0_t))
(assert (<= tau_0_t 200.000000))
(assert (<= 0.000000 tau_1_0))
(assert (<= tau_1_0 200.000000))
(assert (<= 0.000000 tau_1_t))
(assert (<= tau_1_t 200.000000))
(assert (<= 0.000000 tau_2_0))
(assert (<= tau_2_0 200.000000))
(assert (<= 0.000000 tau_2_t))
(assert (<= tau_2_t 200.000000))
(assert (<= -4.000000 omega2_0_0))
(assert (<= omega2_0_0 4.000000))
(assert (<= -4.000000 omega2_0_t))
(assert (<= omega2_0_t 4.000000))
(assert (<= -4.000000 omega2_1_0))
(assert (<= omega2_1_0 4.000000))
(assert (<= -4.000000 omega2_1_t))
(assert (<= omega2_1_t 4.000000))
(assert (<= -4.000000 omega2_2_0))
(assert (<= omega2_2_0 4.000000))
(assert (<= -4.000000 omega2_2_t))
(assert (<= omega2_2_t 4.000000))
(assert (<= -4.000000 omega1_0_0))
(assert (<= omega1_0_0 4.000000))
(assert (<= -4.000000 omega1_0_t))
(assert (<= omega1_0_t 4.000000))
(assert (<= -4.000000 omega1_1_0))
(assert (<= omega1_1_0 4.000000))
(assert (<= -4.000000 omega1_1_t))
(assert (<= omega1_1_t 4.000000))
(assert (<= -4.000000 omega1_2_0))
(assert (<= omega1_2_0 4.000000))
(assert (<= -4.000000 omega1_2_t))
(assert (<= omega1_2_t 4.000000))
(assert (<= 0.000000 time_0))
(assert (<= time_0 200.000000))
(assert (<= 0.000000 time_1))
(assert (<= time_1 200.000000))
(assert (<= 0.000000 time_2))
(assert (<= time_2 200.000000))
(assert (<= 1.000000 mode_0))
(assert (<= mode_0 3.000000))
(assert (<= 1.000000 mode_1))
(assert (<= mode_1 3.000000))
(assert (<= 1.000000 mode_2))
(assert (<= mode_2 3.000000))
(assert (and (and (= omega2_0_0 2.500000) (= omega1_0_0 2.000000) (= tau_0_0 0.000000) (= z_0_0 0.000000) (= y_0_0 0.000000) (>= x_0_0 -0.200000) (<= x_0_0 0.100000)) (= mode_0 1.000000) (= [z_0_t y_0_t x_0_t tau_0_t omega2_0_t omega1_0_t] (integral 0. time_0 [z_0_0 y_0_0 x_0_0 tau_0_0 omega2_0_0 omega1_0_0] flow_1)) (= mode_0 1.000000) (forall_t 1.000000 [0.000000 time_0] (>= x_0_t -5.000000)) (>= x_0_t -5.000000) (>= x_0_0 -5.000000) (forall_t 1.000000 [0.000000 time_0] (>= y_0_t -5.000000)) (>= y_0_t -5.000000) (>= y_0_0 -5.000000) (forall_t 1.000000 [0.000000 time_0] (>= z_0_t -5.000000)) (>= z_0_t -5.000000) (>= z_0_0 -5.000000) (forall_t 1.000000 [0.000000 time_0] (>= omega1_0_t -3.140000)) (>= omega1_0_t -3.140000) (>= omega1_0_0 -3.140000) (forall_t 1.000000 [0.000000 time_0] (>= omega2_0_t -3.140000)) (>= omega2_0_t -3.140000) (>= omega2_0_0 -3.140000) (forall_t 1.000000 [0.000000 time_0] (<= tau_0_t 5.000000)) (<= tau_0_t 5.000000) (<= tau_0_0 5.000000) (= mode_1 2.000000) (>= tau_0_t 4.000000) (= omega2_1_0 1.000000) (= omega1_1_0 1.500000) (= z_1_0 z_0_t) (= y_1_0 (* y_0_t 0.200000)) (= x_1_0 x_0_t) (= tau_1_0 0.000000) (= [z_1_t y_1_t x_1_t tau_1_t omega2_1_t omega1_1_t] (integral 0. time_1 [z_1_0 y_1_0 x_1_0 tau_1_0 omega2_1_0 omega1_1_0] flow_2)) (= mode_1 2.000000) (forall_t 2.000000 [0.000000 time_1] (>= x_1_t -5.000000)) (>= x_1_t -5.000000) (>= x_1_0 -5.000000) (forall_t 2.000000 [0.000000 time_1] (>= y_1_t -5.000000)) (>= y_1_t -5.000000) (>= y_1_0 -5.000000) (forall_t 2.000000 [0.000000 time_1] (>= z_1_t -5.000000)) (>= z_1_t -5.000000) (>= z_1_0 -5.000000) (forall_t 2.000000 [0.000000 time_1] (>= omega1_1_t -3.140000)) (>= omega1_1_t -3.140000) (>= omega1_1_0 -3.140000) (forall_t 2.000000 [0.000000 time_1] (>= omega2_1_t -3.140000)) (>= omega2_1_t -3.140000) (>= omega2_1_0 -3.140000) (forall_t 2.000000 [0.000000 time_1] (<= tau_1_t 10.000000)) (<= tau_1_t 10.000000) (<= tau_1_0 10.000000) (= mode_2 3.000000) (>= tau_1_t 8.000000) (= omega2_2_0 (- 0.000000 omega2_1_t)) (= omega1_2_0 (sin omega1_1_t)) (= z_2_0 z_1_t) (= y_2_0 (* y_1_t 0.500000)) (= x_2_0 (* 0.200000 x_1_t)) (= tau_2_0 0.000000) (= [z_2_t y_2_t x_2_t tau_2_t omega2_2_t omega1_2_t] (integral 0. time_2 [z_2_0 y_2_0 x_2_0 tau_2_0 omega2_2_0 omega1_2_0] flow_3)) (= mode_2 3.000000) (forall_t 3.000000 [0.000000 time_2] (>= x_2_t -5.000000)) (>= x_2_t -5.000000) (>= x_2_0 -5.000000) (forall_t 3.000000 [0.000000 time_2] (>= y_2_t -5.000000)) (>= y_2_t -5.000000) (>= y_2_0 -5.000000) (forall_t 3.000000 [0.000000 time_2] (>= z_2_t -5.000000)) (>= z_2_t -5.000000) (>= z_2_0 -5.000000) (forall_t 3.000000 [0.000000 time_2] (>= omega1_2_t -3.140000)) (>= omega1_2_t -3.140000) (>= omega1_2_0 -3.140000) (forall_t 3.000000 [0.000000 time_2] (>= omega2_2_t -3.140000)) (>= omega2_2_t -3.140000) (>= omega2_2_0 -3.140000) (forall_t 3.000000 [0.000000 time_2] (<= tau_2_t 6.000000)) (<= tau_2_t 6.000000) (<= tau_2_0 6.000000) (= mode_2 3.000000) (= tau_2_t 4.000000)))
(check-sat)
(exit)
