(set-logic QF_NRA_ODE)
(declare-fun d () Real)
(declare-fun d_0_0 () Real)
(declare-fun d_0_t () Real)
(declare-fun time_0 () Real)
(declare-fun mode_0 () Real)
(define-ode flow_1 ((= d/dt[d] (tan d))))
(assert (<= 0 d_0_0))
(assert (<= d_0_0 1))
(assert (<= 0 d_0_t))
(assert (<= d_0_t 1))
(assert (<= 0 time_0 [0.000000]))
(assert (<= time_0 10 [0.000000]))
(assert (<= 1 mode_0))
(assert (<= mode_0 1))
(assert (and (= d_0_0 0) (= mode_0 1) (= [d_0_t] (integral 0. time_0 [d_0_0] flow_1)) (= mode_0 1) (forall_t 1 [0 time_0] (>= d_0_t 0)) (>= d_0_t 0) (>= d_0_0 0) (= mode_0 1) (>= d_0_t 1)))
(check-sat)
(exit)
