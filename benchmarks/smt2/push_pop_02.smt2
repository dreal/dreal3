(set-logic QF_NRA)
(declare-fun angle () Real)
(declare-fun distance () Real)
(declare-fun angle_1 () Real)
(declare-fun distance_1 () Real)
(declare-fun px_1 () Real)
(declare-fun py_1 () Real)
(declare-fun sinA_1 () Real)
(declare-fun cosA_1 () Real)
(declare-fun xHitDist_1 () Real)
(declare-fun yHitDist_1 () Real)
(declare-fun xSign_1 () Real)
(declare-fun ySign_1 () Real)
(declare-fun _C0_ () Bool)
(declare-fun sinA_2 () Real)
(declare-fun ySign_2 () Real)
(declare-fun yHitDist_2 () Real)
(declare-fun _C1_ () Bool)
(declare-fun cosA_2 () Real)
(declare-fun xSign_2 () Real)
(declare-fun xHitDist_2 () Real)
(declare-fun _C2_ () Bool)
(declare-fun _C3_ () Bool)
(declare-fun px_2 () Real)
(declare-fun py_2 () Real)
(declare-fun ySign_3 () Real)
(declare-fun distance_2 () Real)
(declare-fun xSign_3 () Real)
(declare-fun _C4_ () Bool)
(declare-fun xHitDist_3 () Real)
(declare-fun _C5_ () Bool)
(declare-fun yHitDist_3 () Real)
(declare-fun _C6_ () Bool)
(declare-fun _C7_ () Bool)
(declare-fun px_3 () Real)
(declare-fun py_3 () Real)
(declare-fun ySign_4 () Real)
(declare-fun distance_3 () Real)
(declare-fun xSign_4 () Real)
(declare-fun _C8_ () Bool)
(declare-fun xHitDist_4 () Real)
(declare-fun _C9_ () Bool)
(declare-fun yHitDist_4 () Real)
(declare-fun px_4 () Real)
(declare-fun py_4 () Real)
(declare-fun dx_1 () Real)
(declare-fun dy_1 () Real)
(declare-fun deltaSq_1 () Real)
(assert (>= angle 0.392699))
(assert (<= angle 0.589049))
(assert (>= distance 0.375))
(assert (<= distance 0.5))
(assert (= angle_1 angle))
(assert (= distance_1 distance))
(assert (= px_1 1.250000))
(assert (= py_1 0.500000))
(assert (= sinA_1 (sin angle_1)))
(assert (= cosA_1 (cos angle_1)))
(assert (= xHitDist_1 0))
(assert (= yHitDist_1 0))
(assert (= xSign_1 1))
(assert (= ySign_1 1))
(assert (= _C0_ (< sinA_1 0)))
(assert (or (not _C0_) (= sinA_2 (- sinA_1))))
(assert (or (not _C0_) (= ySign_2 -1)))
(assert (or (not _C0_) (= yHitDist_2 (- py_1 0.000000))))
(assert (or _C0_ (= yHitDist_2 (- 1.000000 py_1))))
(assert (or _C0_ (= sinA_2 sinA_1)))
(assert (or _C0_ (= ySign_2 ySign_1)))
(assert (= _C1_ (< cosA_1 0)))
(assert (or (not _C1_) (= cosA_2 (- cosA_1))))
(assert (or (not _C1_) (= xSign_2 -1)))
(assert (or (not _C1_) (= xHitDist_2 (- px_1 0.000000))))
(assert (or _C1_ (= xHitDist_2 (- 1.500000 px_1))))
(assert (or _C1_ (= xSign_2 xSign_1)))
(assert (or _C1_ (= cosA_2 cosA_1)))
(assert (= _C2_ (or (> (* sinA_2 distance_1) yHitDist_2) (> (* cosA_2 distance_1) xHitDist_2))))
(assert (= _C3_ (<= (* cosA_2 yHitDist_2) (* sinA_2 xHitDist_2))))
(assert (or (not (and _C2_ _C3_)) (= px_2 (+ px_1 (/ (*  xSign_2 yHitDist_2 cosA_2) sinA_2)))))
(push 1)
(check-sat)
(assert (or (not (and _C2_ _C3_)) (= py_2 (+ py_1 (* ySign_2 yHitDist_2)))))
(assert (or (not (and _C2_ _C3_)) (= ySign_3 (- ySign_2))))
(assert (or (not (and _C2_ _C3_)) (= distance_2 (- distance_1 (/ yHitDist_2 sinA_2)))))
(assert (or (not (and _C2_ (not _C3_))) (= px_2 (+ px_1 (* xSign_2 xHitDist_2)))))
(assert (or (not (and _C2_ (not _C3_))) (= py_2 (+ py_1 (/ (*  ySign_2 xHitDist_2 sinA_2) cosA_2)))))
(assert (or (not (and _C2_ (not _C3_))) (= xSign_3 (- xSign_2))))
(assert (or (not (and _C2_ (not _C3_))) (= distance_2 (- distance_1 (/ xHitDist_2 cosA_2)))))
(push 1)
(check-sat)
(assert (or (not (and _C2_ (not _C3_))) (= ySign_3 ySign_2)))
(assert (or (not (and _C2_ _C3_)) (= xSign_3 xSign_2)))
(assert (= _C4_ (> xSign_3 0)))
(assert (or (not (and _C2_ _C4_)) (= xHitDist_3 (- 1.500000 px_2))))
(assert (or (not (and _C2_ (not _C4_))) (= xHitDist_3 (- px_2 0.000000))))
(assert (= _C5_ (> ySign_3 0)))
(assert (or (not (and _C2_ _C5_)) (= yHitDist_3 (- 1.000000 py_2))))
(assert (or (not (and _C2_ (not _C5_))) (= yHitDist_3 (- py_2 0.000000))))
(assert (or _C2_ (= distance_2 distance_1)))
(assert (or _C2_ (= yHitDist_3 yHitDist_2)))
(push 1)
(check-sat)
(assert (or _C2_ (= xSign_3 xSign_2)))
(assert (or _C2_ (= ySign_3 ySign_2)))
(assert (or _C2_ (= px_2 px_1)))
(assert (or _C2_ (= py_2 py_1)))
(assert (or _C2_ (= xHitDist_3 xHitDist_2)))
(assert (= _C6_ (or (> (* sinA_2 distance_2) yHitDist_3) (> (* cosA_2 distance_2) xHitDist_3))))
(assert (= _C7_ (<= (* cosA_2 yHitDist_3) (* sinA_2 xHitDist_3))))
(assert (or (not (and _C6_ _C7_)) (= px_3 (+ px_2 (/ (*  xSign_3 yHitDist_3 cosA_2) sinA_2)))))
(assert (or (not (and _C6_ _C7_)) (= py_3 (+ py_2 (* ySign_3 yHitDist_3)))))
(assert (or (not (and _C6_ _C7_)) (= ySign_4 (- ySign_3))))
(push 1)
(check-sat)
(assert (or (not (and _C6_ _C7_)) (= distance_3 (- distance_2 (/ yHitDist_3 sinA_2)))))
(assert (or (not (and _C6_ (not _C7_))) (= px_3 (+ px_2 (* xSign_3 xHitDist_3)))))
(assert (or (not (and _C6_ (not _C7_))) (= py_3 (+ py_2 (/ (*  ySign_3 xHitDist_3 sinA_2) cosA_2)))))
(assert (or (not (and _C6_ (not _C7_))) (= xSign_4 (- xSign_3))))
(assert (or (not (and _C6_ (not _C7_))) (= distance_3 (- distance_2 (/ xHitDist_3 cosA_2)))))
(assert (or (not (and _C6_ (not _C7_))) (= ySign_4 ySign_3)))
(assert (or (not (and _C6_ _C7_)) (= xSign_4 xSign_3)))
(assert (= _C8_ (> xSign_4 0)))
(pop 1)
(check-sat)
(assert (or (not (and _C6_ _C8_)) (= xHitDist_4 (- 1.500000 px_3))))
(assert (or (not (and _C6_ (not _C8_))) (= xHitDist_4 (- px_3 0.000000))))
(assert (= _C9_ (> ySign_4 0)))
(assert (or (not (and _C6_ _C9_)) (= yHitDist_4 (- 1.000000 py_3))))
(assert (or (not (and _C6_ (not _C9_))) (= yHitDist_4 (- py_3 0.000000))))
(assert (or _C6_ (= distance_3 distance_2)))
(pop 1)
(check-sat)
(assert (or _C6_ (= yHitDist_4 yHitDist_3)))
(assert (or _C6_ (= xSign_4 xSign_3)))
(assert (or _C6_ (= ySign_4 ySign_3)))
(assert (or _C6_ (= px_3 px_2)))
(assert (or _C6_ (= py_3 py_2)))
(assert (or _C6_ (= xHitDist_4 xHitDist_3)))
(assert (= px_4 (+ px_3 (*  distance_3 cosA_2 xSign_4))))
(pop 1)
(check-sat)
(assert (= py_4 (+ py_3 (*  distance_3 sinA_2 ySign_4))))
(assert (= dx_1 (- 0.250000 px_4)))
(assert (= dy_1 (- 0.500000 py_4)))
(assert (= deltaSq_1 (+ (* dx_1 dx_1) (* dy_1 dy_1))))
(assert (not (> deltaSq_1 0.000400)))
(check-sat)
(exit)
