#define D 0.1
#define K 0.9
[0, 10] x;
[9.8] g;
[-18, 18] v;
//[0, 3] f;
[0, 10] time;

{ mode 1; //falling

  invt:
        (v <= 0);
        (x >= 0);
  flow:
//	d/dt[f] = 0;
        d/dt[x] = v;
        d/dt[v] = -g + (- D * (v ^ 2));
  jump:
        (x = 0) ==> @5 (and (x' = x) (v' = - K * v));
}
{ mode 2; //falling

  invt:
        (v <= 0);
        (x >= 0);
  flow:
//	d/dt[f] = 0;
        d/dt[x] = v;
        d/dt[v] = -g + (- D * (v ^ 2));
  jump:
        (x = 0) ==> @5 (and (x' = x) (v' = - K * v));
}
{ mode 3; //falling

  invt:
        (v <= 0);
        (x >= 0);
  flow:
//	d/dt[f] = 0;
        d/dt[x] = v;
        d/dt[v] = -g + (- D * (v ^ 2));
  jump:
        (x = 0) ==> @5 (and (x' = x) (v' = - K * v));
}
{ mode 4; //falling

  invt:
        (v <= 0);
        (x >= 0);
  flow:
//	d/dt[f] = 0;
        d/dt[x] = v;
        d/dt[v] = -g + (- D * (v ^ 2));
  jump:
        (x = 0) ==> @5 (and (x' = x) (v' = - K * v));
}
{
  mode 5; //rising
  invt:
        (v >= 0);
        (x >= 0);
  flow:
//	d/dt[f] = 0;
        d/dt[x] = v;
        d/dt[v] = -g + (- D * (v ^ 2));
  jump:
       (v = 0) ==> @1 (and (x' = x) (v' = 0));
       (v = 0) ==> @2 (and (x' = x) (v' = -1));
       (v = 0) ==> @3 (and (x' = x) (v' = -2));
       (v = 0) ==> @4 (and (x' = x) (v' = -4));
}
init:
@5	(and (x = 1) (v = 0));

goal:
@5	(and (x >= 1.5) (x <= 3.0));
