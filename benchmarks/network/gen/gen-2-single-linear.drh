#define capacity_gen 1600
#define eps 0.001
[0, 1000] time;
(component fuellevel_gen;
[0, 1600] fuellevel_gen;
label do_start_refuel0;
	label do_stop_refuel0;
label do_start_refuel1;
	label do_stop_refuel1;
label do_stop_gen;
	label do_start_gen;
(mode fuellevel_nogen_t0;
 invt:
 flow:
   d/dt[fuellevel_gen] = 0;
 jump:
(do_start_refuel0) : true ==> @fuellevel_nogen_t1 true;
(do_start_refuel1) : true ==> @fuellevel_nogen_t1 true;
 (do_start_gen) : true ==> @fuellevel_gen_t0 true;
)
(mode fuellevel_nogen_t1;
 invt:
 flow:
   d/dt[fuellevel_gen] = 2;
 jump:
(do_start_refuel0) : true ==> @fuellevel_nogen_t2 true;
(do_start_refuel1) : true ==> @fuellevel_nogen_t2 true;
(do_stop_refuel0) : true ==> @fuellevel_nogen_t0 true;
(do_stop_refuel1) : true ==> @fuellevel_nogen_t0 true;
 (do_start_gen) : true ==> @fuellevel_gen_t1 true;
)
(mode fuellevel_nogen_t2;
 invt:
 flow:
   d/dt[fuellevel_gen] = 4;
 jump:
(do_stop_refuel0) : true ==> @fuellevel_nogen_t1 true;
(do_stop_refuel1) : true ==> @fuellevel_nogen_t1 true;
 (do_start_gen) : true ==> @fuellevel_gen_t2 true;
)
(mode fuellevel_gen_t0;
 invt:
 flow:
   d/dt[fuellevel_gen] = (0 - 1);
 jump:
(do_start_refuel0) : true ==> @fuellevel_gen_t1 true;
(do_start_refuel1) : true ==> @fuellevel_gen_t1 true;
 (do_stop_gen) : true ==> @fuellevel_nogen_t0 true;
)
(mode fuellevel_gen_t1;
 invt:
 flow:
   d/dt[fuellevel_gen] = (2 - 1);
 jump:
(do_start_refuel0) : true ==> @fuellevel_gen_t2 true;
(do_start_refuel1) : true ==> @fuellevel_gen_t2 true;
(do_stop_refuel0) : true ==> @fuellevel_gen_t0 true;
(do_stop_refuel1) : true ==> @fuellevel_gen_t0 true;
 (do_stop_gen) : true ==> @fuellevel_nogen_t1 true;
)
(mode fuellevel_gen_t2;
 invt:
 flow:
   d/dt[fuellevel_gen] = (4 - 1);
 jump:
(do_stop_refuel0) : true ==> @fuellevel_gen_t1 true;
(do_stop_refuel1) : true ==> @fuellevel_gen_t1 true;
 (do_stop_gen) : true ==> @fuellevel_nogen_t2 true;
)
)
(component generator_ran;
label do_stop_gen;
(mode ran_false;
 invt:
 flow:
 jump:
 (do_stop_gen) : true ==> @ran_true true;
)
(mode ran_true;
 invt:
 flow:
 jump:

)
)
(component available_tank;
label used_tank;
(mode available_false;
 invt:
 flow:
 jump:
)
(mode available_true;
 invt:
 flow:
 jump:
 (used_tank) : true ==> @available_false true;
)
)
 (component refueling_gen;
label start;
label stop;
(mode refueling_false;
 invt:
 flow:
 jump:
 (start) : true ==> @refueling_true true;
)
(mode refueling_true;
 invt:
 flow:
 jump:
 (stop) : true ==> @refueling_false true;
)
)
 (component generate_gen_automaton;
[0, 1000] T_generate_gen_automaton; 
label do_stop_gen; 
label did_start_gen; 
label did_stop_gen; 
label do_start_gen; 
(mode running_generate_gen_automaton; 
invt:
(T_generate_gen_automaton <= 1000); 
flow:
d/dt[T_generate_gen_automaton] = 1; 
jump:
(do_stop_gen): (and (T_generate_gen_automaton = 1000)) ==> @running_to_non_active_generate_gen_automaton (and (T_generate_gen_automaton' = 0) ); 
)
(mode non_active_generate_gen_automaton; 
invt:
flow:
d/dt[T_generate_gen_automaton] = 0; 
jump:
(do_start_gen): (true) ==> @interm_to_running_generate_gen_automaton (and (T_generate_gen_automaton' = 0)); 
)
(mode interm_to_running_generate_gen_automaton; 
invt:
(T_generate_gen_automaton <= 0); 
flow:
d/dt[T_generate_gen_automaton] = 1; 
jump:
(did_start_gen): true ==> @running_generate_gen_automaton (and (T_generate_gen_automaton' = 0)); 
)
(mode running_to_non_active_generate_gen_automaton; 
invt:
(T_generate_gen_automaton <= 0); 
flow:
d/dt[T_generate_gen_automaton] = 1; 
jump: 
(did_stop_gen): (and (T_generate_gen_automaton = 0)) ==> @non_active_generate_gen_automaton (and (T_generate_gen_automaton' = 0)); 
)
)
 (component refuel_gen_tank1_automaton;
[0, 20] T_refuel_gen_tank1_automaton;
[0, capacity_gen] fuellevel_gen;

label do_stop_refuel;
label did_start_refuel;
label did_stop_refuel;
label do_start_refuel;
(mode running_refuel_gen_tank1_automaton;
invt:
(T_refuel_gen_tank1_automaton <= 20);
(fuellevel_gen<capacity_gen);
flow:
d/dt[T_refuel_gen_tank1_automaton] = 1;
jump:
(do_stop_refuel): (and (T_refuel_gen_tank1_automaton = 20)) ==> @running_to_non_active_refuel_gen_tank1_automaton (and (T_refuel_gen_tank1_automaton' = 0));
)
(mode non_active_refuel_gen_tank1_automaton;
invt:
flow:
d/dt[T_refuel_gen_tank1_automaton] = 0;
jump:
(do_start_refuel): true ==> @interm_to_running_refuel_gen_tank1_automaton (and (T_refuel_gen_tank1_automaton' = 0) );
)
(mode interm_to_running_refuel_gen_tank1_automaton;
invt:
(T_refuel_gen_tank1_automaton <= 0);
flow:
d/dt[T_refuel_gen_tank1_automaton] = 1;
jump:
(did_start_refuel): (and (T_refuel_gen_tank1_automaton = 0)) ==> @running_refuel_gen_tank1_automaton (and (T_refuel_gen_tank1_automaton' = 0));
)
(mode running_to_non_active_refuel_gen_tank1_automaton;
invt:
(T_refuel_gen_tank1_automaton <= 0);
flow:
d/dt[T_refuel_gen_tank1_automaton] = 1;
jump:
(did_stop_refuel): (and (T_refuel_gen_tank1_automaton = 0)) ==> @non_active_refuel_gen_tank1_automaton (and (T_refuel_gen_tank1_automaton' = 0));
)
)
 (component refuel_gen_tank1_automaton;
[0, 20] T_refuel_gen_tank1_automaton;
[0, capacity_gen] fuellevel_gen;

label do_stop_refuel;
label did_start_refuel;
label did_stop_refuel;
label do_start_refuel;
(mode running_refuel_gen_tank1_automaton;
invt:
(T_refuel_gen_tank1_automaton <= 20);
(fuellevel_gen<capacity_gen);
flow:
d/dt[T_refuel_gen_tank1_automaton] = 1;
jump:
(do_stop_refuel): (and (T_refuel_gen_tank1_automaton = 20)) ==> @running_to_non_active_refuel_gen_tank1_automaton (and (T_refuel_gen_tank1_automaton' = 0));
)
(mode non_active_refuel_gen_tank1_automaton;
invt:
flow:
d/dt[T_refuel_gen_tank1_automaton] = 0;
jump:
(do_start_refuel): true ==> @interm_to_running_refuel_gen_tank1_automaton (and (T_refuel_gen_tank1_automaton' = 0) );
)
(mode interm_to_running_refuel_gen_tank1_automaton;
invt:
(T_refuel_gen_tank1_automaton <= 0);
flow:
d/dt[T_refuel_gen_tank1_automaton] = 1;
jump:
(did_start_refuel): (and (T_refuel_gen_tank1_automaton = 0)) ==> @running_refuel_gen_tank1_automaton (and (T_refuel_gen_tank1_automaton' = 0));
)
(mode running_to_non_active_refuel_gen_tank1_automaton;
invt:
(T_refuel_gen_tank1_automaton <= 0);
flow:
d/dt[T_refuel_gen_tank1_automaton] = 1;
jump:
(did_stop_refuel): (and (T_refuel_gen_tank1_automaton = 0)) ==> @non_active_refuel_gen_tank1_automaton (and (T_refuel_gen_tank1_automaton' = 0));
)
)
 (component lock_automaton;
	label do_start_refuel0;
	label did_start_refuel0;
	label do_stop_refuel0;
        label did_stop_refuel0;
 	label do_start_refuel1;
	label did_start_refuel1;
	label do_stop_refuel1;
        label did_stop_refuel1;
 label do_stop_gen;
	label did_start_gen;
	label do_start_gen;
	label did_stop_gen;
	
	(mode locked;
	invt:
	flow:
	jump:
 	(did_start_refuel0): (true) ==> @unlocked (true);
	(did_stop_refuel0): (true) ==> @unlocked (true);
 	(did_start_refuel1): (true) ==> @unlocked (true);
	(did_stop_refuel1): (true) ==> @unlocked (true);
 (did_start_gen): (true) ==> @unlocked (true);
	(did_stop_gen): (true) ==> @unlocked (true);
	)
	
	(mode unlocked;
	invt:
	flow:
	jump:
 (do_start_refuel0): (true) ==> @locked (true);
	(do_stop_refuel0): (true) ==> @locked (true);
 (do_start_refuel1): (true) ==> @locked (true);
	(do_stop_refuel1): (true) ==> @locked (true);
 (do_stop_gen): (true) ==> @locked (true);
	(do_start_gen): (true) ==> @locked (true);
	)
)
 analyze: 
 
fuellevel_gen = fuellevel_gen[[], @fuellevel_nogen_t0 (fuellevel_gen = 920)];
lock_automaton0 = lock_automaton[[], @unlocked (true)];
generate_gen_automaton0 = generate_gen_automaton[[T_generate_gen_automaton/time_generate_gen_automaton], @non_active_generate_gen_automaton (and  (fuellevel_gen = 920) (T_generate_gen_automaton = 0))];
refuel_gen_tank1_automaton0 = refuel_gen_tank1_automaton[[T_refuel_gen_tank1_automaton/time_rt0,do_stop_refuel/do_stop_refuel0,did_start_refuel/did_start_refuel0,did_stop_refuel/did_stop_refuel0,do_start_refuel/do_start_refuel0], @non_active_refuel_gen_tank1_automaton (T_refuel_gen_tank1_automaton = 0)];
refuel_gen_tank1_automaton1 = refuel_gen_tank1_automaton[[T_refuel_gen_tank1_automaton/time_rt1,do_stop_refuel/do_stop_refuel1,did_start_refuel/did_start_refuel1,did_stop_refuel/did_stop_refuel1,do_start_refuel/do_start_refuel1], @non_active_refuel_gen_tank1_automaton (T_refuel_gen_tank1_automaton = 0)];
generator_ran0 = generator_ran[[], @ran_false true];
available_tank0 = available_tank[[used_tank/do_start_refuel0], @available_true true];
refueling_gen0 = refueling_gen[[stop/do_stop_refuel0, start/do_start_refuel0], @refueling_false true];
available_tank1 = available_tank[[used_tank/do_start_refuel1], @available_true true];
refueling_gen1 = refueling_gen[[stop/do_stop_refuel1, start/do_start_refuel1], @refueling_false true];
( refuel_gen_tank1_automaton0 || available_tank0  || refueling_gen0 || refuel_gen_tank1_automaton1 || available_tank1  || refueling_gen1 || lock_automaton0 || generate_gen_automaton0 || generator_ran0 || fuellevel_gen);
goal: (@generator_ran0.ran_true): (true);
