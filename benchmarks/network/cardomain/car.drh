#define eps 0.001

[0, 1000] time;



(component moving_automaton;
[-1000, 1000] a;
[-1000, 1000] d;
[-1000, 1000] v;
label do_stop;
label do_start;
(mode on_moving_automaton;
invt:
flow:
d/dt[d] = v;
d/dt[v] = a;
d/dt[a] = 0;
jump:
(do_stop) : true ==> @off_moving_automaton true;
)

(mode off_moving_automaton;
invt:
flow:
d/dt[d] = 0;
d/dt[v] = 0;
d/dt[a] = 0;
jump:
(do_start) : true ==> @on_moving_automaton true;
)

)

(component windresistance_automaton;
[-1000, 1000] v;
label resistance;
label no_resistance;
label to_resistance;
label to_no_resistance;

(mode on_windresistance_automaton;
invt:
(v >= 50);
flow:
d/dt[v] = -(0.100000) * (((v) - (50)) * ((v) - (50)));
jump:
(to_no_resistance): (v <= 50) ==> @to_off_windresistance_automaton (true);
)

(mode to_on_windresistance_automaton;
invt:
flow:
d/dt[v] = 0;
jump:
(resistance): true ==> @on_windresistance_automaton (true);
)

(mode off_windresistance_automaton;
invt:
(v < 50);
flow:
d/dt[v] = 0;
jump:
(to_resistance): (v >= 50) ==> @to_on_windresistance_automaton (true);
)

(mode to_off_windresistance_automaton;
invt:
flow:
d/dt[v] = 0;
jump:
(no_resistance): true ==> @off_windresistance_automaton (true);
)
)

(component start_automaton;

label did_start;
label do_start;
(mode on_start_automaton;
invt:
flow:
jump:
(did_start): true ==> @off_start_automaton true;
)
(mode off_start_automaton;
invt:
flow:
jump:
(do_start): true ==> @on_start_automaton true;

)
)

(component stop_automaton;

label did_stop;
label do_stop;
(mode on_stop_automaton;
invt:
flow:
jump:
(did_stop): true ==> @off_stop_automaton true;
)
(mode off_stop_automaton;
invt:
flow:
jump:
(do_stop): (and (v = 0) (a = 0)) ==> @on_stop_automaton true;

)
)

(component accelerate_automaton;

label did_accel;
label do_accel;
(mode on_accelerate_automaton;
invt:
flow:
jump:
(did_accel): true ==> @off_accelerate_automaton true;
)
(mode off_accelerate_automaton;
invt:
flow:
jump:
(do_accel): true ==> @on_accelerate_automaton (and (a' = a + 1));
//(do_accel): true ==> @on_accelerate_automaton (and (a' = a + 2));
)
)

(component decelerate_automaton;

label did_decel;
label do_decel;
(mode on_decelerate_automaton;
invt:
flow:
jump:
(did_decel): true ==> @off_decelerate_automaton true;
)
(mode off_decelerate_automaton;
invt:
flow:
jump:
(do_decel): true ==> @on_decelerate_automaton (and (a' = a - 1));
//(do_decel): true ==> @on_decelerate_automaton (and (a' = a - 2));
)
)

(component engineexplode_automaton;
[-1000, 1000] a;
[-1000, 1000] v;

label did_explode;
label do_explode;
(mode on_engineexplode_automaton;
invt:
flow:
d/dt[v] = 0;
d/dt[a] = 0;
jump:
(did_explode): true ==> @off_engineexplode_automaton true;
)
(mode off_engineexplode_automaton;
invt:
flow:
d/dt[v] = 0;
d/dt[a] = 0;
jump:
(do_explode): (and (a >= 1) (v >= 200)) ==> @on_engineexplode_automaton (and   (a' = 0));
)
)

(component running;
label do_explode;
label do_stop;
label do_start;
label do_accel;
label do_decel;
(mode running_true;
invt:
flow:
jump:
//(do_explode): true ==> @running_false true;
(do_stop): true ==> @running_false true;
(do_accel): true ==> @running_true true;
(do_decel): true ==> @running_true true;
//(to_resistance): true ==> @running_true true;
)
(mode running_false;
invt:
flow:
jump:
(do_start): true ==> @running_true true;
)
)

(component blown;
label do_explode;
(mode blown_true;
invt:
flow:
jump:
)
(mode blown_false;
invt:
flow:
jump:
(do_explode): true ==> @blown_true true;
)
)



(component lock_automaton;
[0,1] lock_timer;

label did_accel;
label do_accel;
label did_decel;
label do_decel;
label did_explode;
label do_explode;
label resistance;
label to_resistance;
label no_resistance;
label to_no_resistance;
label do_start;
label did_start;
label do_stop;
label did_stop;


(mode lock_enabled;
invt:
(lock_timer <= 0);
flow:
d/dt[lock_timer] = 1;
jump:
(did_accel): (lock_timer >= 0) ==> @lock_released (true);
(did_decel): (lock_timer >= 0) ==> @lock_released (true);
//(did_explode): (lock_timer >= 0) ==> @lock_released (true);
(did_start): (lock_timer >= 0) ==> @lock_released (true);
(did_stop): (lock_timer >= 0) ==> @lock_released (true);
//(resistance): (lock_timer >= 0) ==> @lock_released (true);
//(no_resistance): (lock_timer >= 0) ==> @lock_released (true);
)
(mode lock_released;
invt:
flow:
d/dt[lock_timer] = 0;
jump:
(do_accel): (true) ==> @lock_enabled (lock_timer' = 0);
(do_decel): (true) ==> @lock_enabled (lock_timer' = 0);
//(do_explode): (true) ==> @lock_enabled (lock_timer' = 0);
(do_start): (true) ==> @lock_enabled (lock_timer' = 0);
(do_stop): (true) ==> @lock_enabled (lock_timer' = 0);
//(to_resistance): (true) ==> @lock_enabled (lock_timer' = 0);
//(to_no_resistance): (true) ==> @lock_enabled (lock_timer' = 0);
)
)


analyze: 

moving_automaton0 = moving_automaton[[], @off_moving_automaton (and (a = 0) (d = 0) (v = 0))];
windresistance_automaton0 = windresistance_automaton[[], @off_windresistance_automaton true];
accelerate_automaton0 = accelerate_automaton[[], @off_accelerate_automaton true];
decelerate_automaton0 = decelerate_automaton[[], @off_decelerate_automaton true];
engineexplode_automaton0 = engineexplode_automaton[[], @off_engineexplode_automaton true];
running_automaton0 = running[[], @running_false true];
blown_automaton0 = blown[[], @blown_false true];
start_automaton0 = start_automaton[[], @off_start_automaton true];
stop_automaton0 = stop_automaton[[], @off_stop_automaton true];
lock_automaton0 = lock_automaton[[lock_timer/time_lock], @lock_released (lock_timer=0)];

(
moving_automaton0 ||
//windresistance_automaton0 ||
accelerate_automaton0 ||
decelerate_automaton0 ||
start_automaton0 ||
stop_automaton0 ||
//engineexplode_automaton0 ||
lock_automaton0 ||
running_automaton0
//||
//blown_automaton0
);

goal:
(//@blown_automaton0.blown_false,
@running_automaton0.running_false) : (and (d =30) );


