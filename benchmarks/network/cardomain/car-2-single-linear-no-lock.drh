[0, 1000] time;
(component acceleration;
 [-1000, 1000] a;
(mode a_zero;
invt:
flow:
d/dt[a] = 0;
jump:
)
)
(component distance;
 [-1000, 1000] d;
 [-1000, 1000] v;	
label do_start;
label do_stop;
(mode d_zero;
invt:
flow:
d/dt[d] = 0;
jump:
(do_start) : true ==> @d_v true;
)

(mode d_v;
invt:
flow:
d/dt[d] = v;
jump:
(do_stop) : true ==> @d_zero true;
)

)
(component velocity;
 [-1000, 1000] a;
 [-1000, 1000] v;	
label do_start;
label do_stop;
(mode v_zero;
invt:
flow:
d/dt[v] = 0;
jump:
(do_start) : true ==> @v_a true;
(do_stop) : true ==> @v_zero true;
)

(mode v_a;
invt:
flow:
d/dt[v] = a;
jump:
(do_stop) : true ==> @v_zero true;
)
)
(component moving_automaton;
label do_stop;
label do_start;
(mode on_moving_automaton;
invt:
flow:
jump:
(do_stop) : true ==> @off_moving_automaton true;
)

(mode off_moving_automaton;
invt:
flow:
jump:
(do_start) : true ==> @on_moving_automaton true;
)

)
(component start_automaton;
 [-1000, 1000] v;
label do_start;

(mode off_start_automaton;
invt:
flow:
jump:
(do_start): true ==> @off_start_automaton true;

)
)
(component stop_automaton;
 [-1000, 1000] v;
[-1000, 1000] a;
label do_stop;

(mode off_stop_automaton;
invt:
flow:
jump:
(do_stop): (and (v = 0) (a = 0)) ==> @off_stop_automaton true;

)
)
(component accelerate_automaton1;
label do_accel1;

(mode off_accelerate_automaton;
invt:
flow:
jump:
(do_accel1): true ==> @off_accelerate_automaton (and (a' = a + 1));

)
)
(component decelerate_automaton1;
label do_decel1;

(mode off_decelerate_automaton;
invt:
flow:
jump:
(do_decel1): true ==> @off_decelerate_automaton (and (a' = a - 1));
)
)
(component accelerate_automaton2;
label do_accel2;

(mode off_accelerate_automaton;
invt:
flow:
jump:
(do_accel2): true ==> @off_accelerate_automaton (and (a' = a + 2));

)
)
(component decelerate_automaton2;
label do_decel2;

(mode off_decelerate_automaton;
invt:
flow:
jump:
(do_decel2): true ==> @off_decelerate_automaton (and (a' = a - 2));
)
)
(component running;
label do_stop;
label do_start;
label do_accel1;
label do_decel1;
label do_accel2;
label do_decel2;
(mode running_true;
invt:
flow:
jump:
(do_stop): true ==> @running_false true;
(do_accel1): true ==> @running_true true;
(do_decel1): true ==> @running_true true;
(do_accel2): true ==> @running_true true;
(do_decel2): true ==> @running_true true;
)
(mode running_false;
invt:
flow:
jump:
(do_start): true ==> @running_true true;
)
)
(component lock_automaton;

label do_accel1;
label do_decel1;
label do_accel2;
label do_decel2;
label do_start;
label do_stop;



(mode lock_released;
invt:
flow:
jump:
(do_accel1): (true) ==> @lock_released true;
(do_decel1): (true) ==> @lock_released true;
(do_accel2): (true) ==> @lock_released true;
(do_decel2): (true) ==> @lock_released true;
(do_start): (true) ==> @lock_released true;
(do_stop): (true) ==> @lock_released true;
)
)
analyze: 
moving_automaton0 = moving_automaton[[], @off_moving_automaton true];
accelerate_automaton1 = accelerate_automaton1[[], @off_accelerate_automaton true];
decelerate_automaton1 = decelerate_automaton1[[], @off_decelerate_automaton true];
accelerate_automaton2 = accelerate_automaton2[[], @off_accelerate_automaton true];
decelerate_automaton2 = decelerate_automaton2[[], @off_decelerate_automaton true];
running_automaton0 = running[[], @running_false true];
start_automaton0 = start_automaton[[], @off_start_automaton true];
stop_automaton0 = stop_automaton[[], @off_stop_automaton true];
lock_automaton0 = lock_automaton[[], @lock_released true];
acceleration0 = acceleration[[], @a_zero (a = 0)];
velocity0 = velocity[[], @v_zero (v = 0)];
distance0 = distance[[], @d_zero (d = 0)];

(
acceleration0 ||
velocity0 ||
distance0 ||
moving_automaton0
accelerate_automaton1 ||
decelerate_automaton1 ||
accelerate_automaton2 ||
decelerate_automaton2 ||
start_automaton0 ||
stop_automaton0 ||
lock_automaton0 ||
running_automaton0
);

goal:
(@running_automaton0.running_false) : (and (d =30) );
