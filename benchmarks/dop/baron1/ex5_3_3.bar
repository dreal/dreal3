//  NLP written by GAMS Convert at 02/19/13 20:49:42
//  
//  Equation counts
//      Total        E        G        L        N        X        C        B
//         54       54        0        0        0        0        0        0
//  
//  Variable counts
//                   x        b        i      s1s      s2s       sc       si
//      Total     cont   binary  integer     sos1     sos2    scont     sint
//         63       63        0        0        0        0        0        0
//  FX      0        0        0        0        0        0        0        0
//  
//  Nonzero counts
//      Total    const       NL      DLL
//        288       88      200        0
//
// Reformulation has removed 1 variable and 1 equation
//


VARIABLES  x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19
          ,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36
          ,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53
          ,x54,x55,x56,x57,x58,x59,x60,x61,x62;

POSITIVE_VARIABLES  x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17
          ,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34
          ,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51
          ,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;

UPPER_BOUNDS{
x1: 600;
x2: 600;
x3: 600;
x4: 600;
x5: 600;
x6: 600;
x7: 600;
x8: 600;
x9: 600;
x10: 600;
x11: 600;
x12: 600;
x13: 600;
x14: 600;
x15: 600;
x16: 600;
x17: 600;
x18: 600;
x19: 600;
x20: 600;
x21: 600;
x22: 600;
x23: 600;
x24: 600;
x25: 600;
x26: 600;
x27: 600;
x28: 600;
x29: 600;
x30: 600;
x31: 600;
x32: 600;
x33: 1;
x34: 1;
x35: 1;
x36: 1;
x37: 1;
x38: 1;
x39: 1;
x40: 1;
x41: 1;
x42: 1;
x43: 1;
x44: 1;
x45: 1;
x46: 1;
x47: 1;
x48: 1;
x49: 1;
x50: 1;
x51: 1;
x52: 1;
x53: 1;
x54: 1;
x55: 1;
x56: 1;
x57: 1;
x58: 1;
x59: 1;
x60: 1;
x61: 1;
x62: 1;
}

EQUATIONS  e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11,e12,e13,e14,e15,e16,e17,e18,e19
          ,e20,e21,e22,e23,e24,e25,e26,e27,e28,e29,e30,e31,e32,e33,e34,e35,e36
          ,e37,e38,e39,e40,e41,e42,e43,e44,e45,e46,e47,e48,e49,e50,e51,e52,e53;


e1:    x1 + x2 + x3 + x4 + x5 == 600;

e2:  - x1 + x6 - x17 - x26 == 0;

e3:  - x2 - x11 + x15 - x27 == 0;

e4:  - x3 - x12 - x21 + x24 == 0;

e5:    x7 - x8 - x9 == 0;

e6:    x10 - x11 - x12 - x13 - x14 == 0;

e7:    x16 - x17 - x18 - x19 == 0;

e8:    x20 - x21 - x22 - x23 == 0;

e9:    x25 - x26 - x27 - x28 - x29 == 0;

e10:    x30 - x31 - x32 == 0;

e11: x7*x37 - 0.85*x6*x33 == 0;

e12: x16*x48 - 0.85*x15*x44 == 0;

e13: x25*x59 - x24*x55 == 0;

e14: x10*x40 - x6*x34 == 0;

e15: x20*x51 - 0.85*x15*x45 == 0;

e16: x30*x62 - 0.85*x24*x56 == 0;

e17: x6*x33 - x7*x37 - x10*x39 == 0;

e18: x6*x34 - x7*x38 - x10*x40 == 0;

e19: x6*x35 - x10*x41 == 0;

e20: x6*x36 - x10*x42 == 0;

e21: x15*x43 - x16*x47 == 0;

e22: x15*x44 - x16*x48 - x20*x50 == 0;

e23: x15*x45 - x16*x49 - x20*x51 == 0;

e24: x15*x46 - x20*x52 == 0;

e25: x24*x53 - x25*x57 == 0;

e26: x24*x54 - x25*x58 == 0;

e27: x24*x55 - x25*x59 - x30*x61 == 0;

e28: x24*x56 - x25*x60 - x30*x62 == 0;

e29: x17*x47 + x26*x57 - x6*x33 + 0.25*x1 == 0;

e30: x17*x48 + x26*x58 - x6*x34 + 0.333*x1 == 0;

e31: x17*x49 + x26*x59 - x6*x35 + 0.167*x1 == 0;

e32: x26*x60 - x6*x36 + 0.25*x1 == 0;

e33: x11*x39 + x27*x57 - x15*x43 + 0.25*x2 == 0;

e34: x11*x40 + x27*x58 - x15*x44 + 0.333*x2 == 0;

e35: x11*x41 + x27*x59 - x15*x45 + 0.167*x2 == 0;

e36: x11*x42 + x27*x60 - x15*x46 + 0.25*x2 == 0;

e37: x12*x39 - x24*x53 + 0.25*x3 == 0;

e38: x12*x40 + x21*x50 - x24*x54 + 0.333*x3 == 0;

e39: x12*x41 + x21*x51 - x24*x55 + 0.167*x3 == 0;

e40: x12*x42 + x21*x52 - x24*x56 + 0.25*x3 == 0;

e41: x8*x37 + x13*x39 + x18*x47 + x28*x57 + 0.25*x4 == 50;

e42: x8*x38 + x13*x40 + x18*x48 + x22*x50 + x28*x58 + 0.222*x4 == 100;

e43: x13*x41 + x18*x49 + x22*x51 + x28*x59 + x31*x61 + 0.167*x4 == 40;

e44: x13*x42 + x22*x52 + x28*x60 + x31*x62 + 0.25*x4 == 100;

e45:    x33 + x34 + x35 + x36 == 1;

e46:    x37 + x38 == 1;

e47:    x39 + x40 + x41 + x42 == 1;

e48:    x43 + x44 + x45 + x46 == 1;

e49:    x47 + x48 + x49 == 1;

e50:    x50 + x51 + x52 == 1;

e51:    x53 + x54 + x55 + x56 == 1;

e52:    x57 + x58 + x59 + x60 == 1;

e53:    x61 + x62 == 1;

OBJ: minimize (0.00132223 + 0.0016446*x33 + 0.0018611*x34 + 0.001262*x35)*x6 + 
              (-9.40700000000017e-5 + 0.0015625*x43 + 0.0091604*x44 + 0.0076758
              *x45)*x15 + (0.00457315 - 0.001748*x53 - 0.0002583*x54 - 
              0.0004691*x55)*x24 + 1.68776;
